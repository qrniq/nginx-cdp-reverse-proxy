# Events block - configure nginx worker process connections
events {
    worker_connections 1024;  # Maximum number of simultaneous connections per worker process
}

# HTTP block - main configuration for HTTP server functionality
http {

    # Map HTTP upgrade header to connection upgrade value for WebSocket support
    map $http_upgrade $connection_upgrade {
        default upgrade;  # If upgrade header exists, set connection to 'upgrade'
        '' close;         # If upgrade header is empty, close the connection
    }

    # Map server port to backend port - translates frontend ports (923X) to backend ports (922X)
    map $server_port $backend_port {
        "~^483([0-9][0-9])$" "484$1";  # Regex: if port starts with 923 + digit, map to 922 + same digit
        default "";           # Default to empty string if no match
    }

    # Define upstream server group for WebSocket connections
    upstream websocket {
        server 127.0.0.1:$backend_port;  # Backend server using dynamically mapped port
    }

    # First server block - handles multiple ports for Chrome DevTools debugging
    server {
        listen 48300-48399;         # Listen on IPv4 ports 9230 through 9239
        listen [::]:48300-48399;    # Listen on IPv6 ports 9230 through 9239
        server_name _;            # Accept requests for any server name (catch-all)
        
        # Root location - proxy all requests to backend
        location / {
            proxy_pass http://127.0.0.1:$backend_port;     # Forward requests to mapped backend port
            proxy_http_version 1.1;                        # Use HTTP/1.1 for backend communication
            proxy_set_header Upgrade $http_upgrade;        # Pass WebSocket upgrade header
            proxy_set_header Connection $connection_upgrade; # Pass connection upgrade header
            proxy_set_header Host $host;                   # Preserve original host header
        }
    }

    # Second server block - main Chrome DevTools proxy server on port 80
    server {
    listen 80;                    # Listen on standard HTTP port
    server_name localhost;        # Only respond to localhost requests
    
    # Logging configuration for debugging Chrome DevTools connections
    access_log /var/log/nginx/chrome_debugger_access.log;  # Log all access attempts
    error_log /var/log/nginx/chrome_debugger_error.log;    # Log errors for troubleshooting
    
    # Main location block - proxy Chrome DevTools frontend interface
    location / {
        proxy_pass http://127.0.0.1:$backend_port;         # Forward to backend Chrome instance
        proxy_http_version 1.1;                            # Use HTTP/1.1 for better compatibility
        proxy_set_header Upgrade $http_upgrade;            # Enable WebSocket upgrade capability
        proxy_set_header Connection 'upgrade';             # Set connection to upgrade mode
        proxy_set_header Host $host;                       # Preserve original host header
        proxy_set_header X-Real-IP $remote_addr;          # Pass client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Chain of proxy IPs
        proxy_set_header X-Forwarded-Proto $scheme;        # Pass original protocol (http/https)
        proxy_cache_bypass $http_upgrade;                  # Bypass cache for WebSocket upgrades
        proxy_read_timeout 86400;                          # 24-hour timeout for long connections
    }
    
    # DevTools WebSocket location - handles Chrome DevTools Protocol WebSocket connections
    location ~ ^/devtools/page/(.*)$ {
        proxy_pass http://127.0.0.1:$backend_port;         # Forward to Chrome's DevTools endpoint
        proxy_http_version 1.1;                            # Required for WebSocket support
        proxy_set_header Upgrade $http_upgrade;            # Enable WebSocket protocol upgrade
        proxy_set_header Connection "upgrade";             # Set connection to WebSocket mode
        proxy_set_header Host $host;                       # Preserve host for proper routing
        proxy_set_header X-Real-IP $remote_addr;          # Pass real client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Proxy chain information
        proxy_set_header X-Forwarded-Proto $scheme;        # Original request protocol
        proxy_read_timeout 86400;                          # 24-hour read timeout for debugging sessions
        proxy_send_timeout 86400;                          # 24-hour send timeout for debugging sessions
    }
    
    # DevTools JSON API location - serves Chrome DevTools discovery and control API
    location /json {
        proxy_pass http://127.0.0.1:$backend_port;         # Forward to Chrome's JSON API endpoint
        proxy_http_version 1.1;                            # Use HTTP/1.1 protocol
        proxy_set_header Host $host;                       # Maintain host header
        proxy_set_header X-Real-IP $remote_addr;          # Pass client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forwarded IP chain
        proxy_set_header X-Forwarded-Proto $scheme;        # Original request scheme
        
        # CORS headers to allow cross-origin requests from DevTools frontends
        add_header 'Access-Control-Allow-Origin' '*' always;           # Allow all origins
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;  # Allowed HTTP methods
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;  # Allowed headers
    }
    
    # CORS preflight handler - handles OPTIONS requests for cross-origin access
    location ~ ^/json.* {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';               # Allow all origins for preflight
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';  # Methods allowed after preflight
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';  # Headers allowed after preflight
            add_header 'Access-Control-Max-Age' 1728000;                # Cache preflight response for 20 days
            add_header 'Content-Type' 'text/plain; charset=utf-8';      # Set response content type
            add_header 'Content-Length' 0;                              # Empty response body
            return 204;                                                  # Return "No Content" status
        }
    }

    # Health check endpoint - provides service status information
    location /health {
        access_log off;                                                  # Don't log health check requests to reduce noise
        return 200 "nginx proxy healthy on port $server_port\n";       # Return success status with current port
        add_header Content-Type text/plain;                            # Set response as plain text
    }
}

}