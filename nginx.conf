# =============================================================================
# NGINX Chrome DevTools Proxy Configuration
# =============================================================================
# This configuration proxies Chrome DevTools connections to backend instances
# Supports WebSocket upgrades and multi-port debugging sessions

# Worker process connection limits
events {
    worker_connections 1024;
}

http {
    # -----------------------------------------------------------------------------
    # Connection Mapping Configuration
    # -----------------------------------------------------------------------------

    # WebSocket upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Backend port mapping (unused - kept for compatibility)
    map $server_port $backend_port {
        "~^485([0-9])([0-9])$" "483$1$2";
        default "48386";
    }

    # Extract port number from URL path (/port/1234 -> 1234)
    map $request_uri $extracted_port {
        ~*/port/(?<port>\d+)$ $port;
        default "48386";
    }

    # -----------------------------------------------------------------------------
    # Multi-Port Server Block (48300-48399)
    # -----------------------------------------------------------------------------
    # Handles direct port connections for Chrome DevTools debugging

    server {
        listen 48500-48599;
        listen [::]:48500-48599;
        server_name _;

        location / {
            proxy_pass http://127.0.0.1:$extracted_port;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
        }
    }

    # -----------------------------------------------------------------------------
    # Main Proxy Server (Port 80)
    # -----------------------------------------------------------------------------
    # Primary server block with advanced routing and debugging features

    server {
        listen 80;
        server_name localhost;

        # Debug logging configuration
        access_log /var/log/nginx/chrome_debugger_access.log;
        error_log /var/log/nginx/chrome_debugger_error.log debug;
        rewrite_log on;
        log_subrequest on;
        log_not_found on;

        # URL rewriting rules - strip port segments from paths
        rewrite ^/port/(\d+)/?(.*)$ / last;
        rewrite ^/devtools/page/([^/]+)/port/(\d+)/?(.*)$ /devtools/page/$1 last;
        rewrite ^/json/port/(\d+)/?(.*)$ /json last;
        rewrite ^/json/list/port/(\d+)/?(.*)$ /json/list last;
        rewrite ^/json/protocol/port/(\d+)/?(.*)$ /json/protocol last;
        # Root location - Chrome DevTools frontend interface
        location / {
            proxy_pass http://127.0.0.1:$extracted_port;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # DevTools page interface with WebSocket support
        location ~ ^/devtools/page/(.*)$ {
            proxy_pass http://127.0.0.1:$extracted_port;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # JSON API endpoints with CORS support
        location /json {
            proxy_pass http://127.0.0.1:$extracted_port;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers for cross-origin DevTools access
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        }

        # CORS preflight handling for JSON endpoints
        location ~ ^/json.* {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "nginx proxy healthy on port $server_port\n";
            add_header Content-Type text/plain;
        }
    }


}